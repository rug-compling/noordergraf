#!/usr/bin/env python3

'''

import installeren:

    pip3 install --user penman

'''

import re, os, sys
import penman
from penman import constant

placemap = {}
fp = open("geo.txt")
for line in fp:
    a = line.split()
    placemap[a[0]] = a[1]
fp.close()

reDatum = re.compile('(\d\d)-(\d\d)-(\d\d\d\d)')

def process(txt):
    base = txt.split(maxsplit=1)[0][1:]
    sys.stdout.write('###\n### ' + base + '\n###\n\n')

    hasImg = False
    try:
        fp = open('../../img/' + base + '.ttl')
        img = fp.read()
        fp.close()
        hasImg = True
    except:
        pass
    hasLoc = False
    try:
        fp = open('../../img/' + base + '.loc')
        loc = fp.read()
        fp.close()
        hasLoc = True
        loc = loc.strip()
    except:
        pass

    g = penman.decode(txt)

    base = g.instances()[0].source

    lines = []

    for src, _, tgt in g.instances():
        if src != base:
            src = base + '.' + src
        lines.append('tomb:{}  a t:{}'.format(src, tgt))

    for src, role, tgt in g.attributes():
        if src != base:
            src = base + '.' + src
        if constant.type(tgt) == constant.SYMBOL:
            tgt = 'tomb:{}.{}'.format(base, tgt)
        elif constant.type(tgt) == constant.STRING:
            tgt = tgt.replace('\\', '\\\\')
            if role == ':dob' or role == ':dod':
                tgt = reDatum.sub('\\3-\\2-\\1', tgt)
        lines.append('tomb:{} {} {}'.format(src, role, tgt))

    for src, role, tgt in g.edges():
        if src != base:
            src = base + '.' + src
        if tgt != base:
            tgt = base + '.' + tgt
        lines.append('tomb:{} {} tomb:{}'.format(src, role, tgt))

    lines.sort()

    # language tags
    i = 0
    while i < len(lines):
        a = lines[i].split(maxsplit=3)
        if a[1] != ':lan':
            i += 1
            continue
        lan = a[2].strip('"').lower()
        #if lan == 'nld':
        #    continue

        # check dubbele taaltag
        dubbel = False
        for j in range(len(lines)):
            if i == j:
                continue
            b = lines[j].split(maxsplit=3)
            if b[0] == a[0] and b[1] == ':lan':
                dubbel = True
                break
        if dubbel:
            i += 1
            continue

        found = False
        for j in range(len(lines)):
            if i == j:
                continue
            b = lines[j].split(maxsplit=3)
            if b[0] != a[0]:
                continue
            if b[1] == ':geo':
                continue
            if lines[j].endswith('"'):
                lines[j] += '@'+lan
                found = True
        if found:
            lines.pop(i)
        else:
            i += 1

    subj = {}
    for i in range(len(lines)):
        a = lines[i].split()
        if a[1] != ":geo":
            continue
        subj[a[0]] = True
        try:
            a[2] = placemap[a[2].strip('"').strip()]
            lines[i] = ' '.join(a)
        except:
            sys.stderr.write(lines[i] + '\n')
    for i in range(len(lines)):
        a = lines[i].split()
        if a[1] != ":nam":
            continue
        if a[0] in subj:
            a[1] = ":place"
            lines[i] = ' '.join(a)

    prev = ''
    prev2 = ''
    first = True
    for line in  lines:
        a, b, c = line.split(maxsplit=2)
        if a == prev:
            if b == prev2:
                sys.stdout.write(' ,\n       ' + c)
            else:
                sys.stdout.write(' ;\n  ' + b + ' ' + c)
            prev2 = b
        else:
            prev2 = ''
            if prev != '':
                sys.stdout.write(' .\n\n')
            if b == 'a':
                if c == 't:male.n.02' or c == 't:female.n.02':
                    sys.stdout.write(a + ' a t:person.n.01 ;\n  :gender ' + c)
                else:
                    sys.stdout.write(a + ' ' + b + ' ' + c)
            else:
                sys.stdout.write(a + ' ' + b + ' ' + c)
            prev = a
        if first:
            first = False
            if hasImg:
                sys.stdout.write(' ;\n  :image tomb:' + base + '.im1')
            if hasLoc:
                sys.stdout.write(' ;\n  :site site:' + loc)
            prev2 = ''
    sys.stdout.write(' .\n\n')

    if hasImg:
        sys.stdout.write(img)


fp = open(sys.argv[1])
lines = []
for line in fp:
    if line.strip() == '':
        if len(lines) > 0:
            process(''.join(lines))
        lines = []
    else:
        lines.append(' '.join(line.split()) + '\n')
fp.close()
if len(lines) > 0:
    process(''.join(lines))
